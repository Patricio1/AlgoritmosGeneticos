
package algoritmogenetico;

import static algoritmogenetico.AlgoritmoGenetico.AptitudAcumulada;
import static algoritmogenetico.AlgoritmoGenetico.AptitudRelativa;
import static algoritmogenetico.AlgoritmoGenetico.Rangos;
import static algoritmogenetico.AlgoritmoGenetico.ValorCromosoma;
import static algoritmogenetico.AlgoritmoGenetico.ValorDecimal;
import static algoritmogenetico.AlgoritmoGenetico.ValorFuncion;
import static algoritmogenetico.AlgoritmoGenetico.decimal;
import static algoritmogenetico.AlgoritmoGenetico.funcion;
import static algoritmogenetico.AlgoritmoGenetico.generarIndividuos;
import static algoritmogenetico.AlgoritmoGenetico.llenarTabla;
import static algoritmogenetico.AlgoritmoGenetico.numCromosomas;
import static algoritmogenetico.AlgoritmoGenetico.numIndividuos;
import static algoritmogenetico.AlgoritmoGenetico.suma;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.text.DecimalFormat;
import java.util.Random;
import java.util.Stack;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jfree.*;


import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.util.Rotation;

/**
 *
 * @author acer
 */
public class NewJFrame extends javax.swing.JFrame {

    
    public static int numIndividuos;
	public static int numCromosomas = 6;
        public static double suma=0;
        public static int [][] individuos;
        public static String valorBinario="";
        public static String ValorCromosoma[];
        public static double ValorDecimal[];
        public static double ValorFuncion[];
        public static double AptitudRelativa[];
        public static double AptitudAcumulada[];
        public static String Rangos[];
        public  double a,b,c,d;
         Object data [][] = new Object [numIndividuos][7];
        public static DecimalFormat decimal= new DecimalFormat("0.00");
    public NewJFrame() {
        initComponents();
        txtA.setEnabled(false);
        txtB.setEnabled(false);
        
        // Generar();
         
         //GenerarPuntosCruce();
       lblCromosoma.setText(Generar_PuntoCruce());
//        AlgoritmoGenetico Ag = new AlgoritmoGenetico();
//        Ag.llenarTabla(tablaContenido);
    }
    
   
    public void grafica2 () {
        // Fuente de Datos
        getContentPane().add(jPanel2Graf);
        DefaultPieDataset defaultpiedataset = new DefaultPieDataset(); 
       
            
            for (int i = 0,k=1; i < AptitudAcumulada.length; i++,k++) {
            defaultpiedataset.setValue("Cromo "+k+" -"+decimal.format(AptitudAcumulada[i])+"%"  , new Double(AptitudAcumulada[i]));
        }

        // Creando el Grafico
        JFreeChart chart = ChartFactory.createPieChart3D("Datos de los Cromosomas", defaultpiedataset, true, true, false); 
     
        PiePlot3D pieplot3d = (PiePlot3D)chart.getPlot(); 
        pieplot3d.setDepthFactor(0.5); 
        pieplot3d.setStartAngle(290D); 
        pieplot3d.setDirection(Rotation.CLOCKWISE); 
        pieplot3d.setForegroundAlpha(0.5F); 
                // Mostrar Grafico
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(300 , 250));
        chartPanel.setBackground(Color.lightGray);
      

        jPanel2Graf.removeAll();
        jPanel2Graf.setLayout(new FlowLayout(FlowLayout.CENTER));
          
        jPanel2Graf.add(chartPanel);
           jPanel2Graf.revalidate();
            
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Btngenerar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaContenido = new javax.swing.JTable();
        lblCromosoma = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtA = new javax.swing.JTextField();
        txtC = new javax.swing.JTextField();
        txtD = new javax.swing.JTextField();
        txtB = new javax.swing.JTextField();
        cmbGrado = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbNumCromomas = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jPanel2Graf = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        Btngenerar.setText("random");
        Btngenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtngenerarActionPerformed(evt);
            }
        });

        tablaContenido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "N", "Cromosoma", "X", "f(X)", "AptitudRelativa", "AptitudAbsoluta"
            }
        ));
        jScrollPane1.setViewportView(tablaContenido);

        lblCromosoma.setText("jLabel1");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Ecuacion de la forma: ax^3 + bx^2  + cx + d");

        jLabel2.setText("a:");

        jLabel3.setText("b:");

        jLabel4.setText("c:");

        jLabel5.setText("d:");

        txtA.setText("0");

        txtC.setText("0");

        txtD.setText("0");

        txtB.setText("0");

        cmbGrado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        cmbGrado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGradoItemStateChanged(evt);
            }
        });

        jLabel6.setText("N cromomas:");

        cmbNumCromomas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4" }));
        cmbNumCromomas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbNumCromomasItemStateChanged(evt);
            }
        });

        jLabel7.setText("N cromomas:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtA, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtB, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtD, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                .addComponent(txtC))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbGrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(64, 64, 64)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(cmbNumCromomas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7))))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(txtA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(cmbGrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbNumCromomas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel2Graf.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        javax.swing.GroupLayout jPanel2GrafLayout = new javax.swing.GroupLayout(jPanel2Graf);
        jPanel2Graf.setLayout(jPanel2GrafLayout);
        jPanel2GrafLayout.setHorizontalGroup(
            jPanel2GrafLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel2GrafLayout.setVerticalGroup(
            jPanel2GrafLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Btngenerar)
                                .addGap(31, 31, 31)
                                .addComponent(lblCromosoma)))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2Graf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Btngenerar)
                            .addComponent(lblCromosoma)))
                    .addComponent(jPanel2Graf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtngenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtngenerarActionPerformed

        numIndividuos=Integer.valueOf(cmbNumCromomas.getSelectedItem().toString());
       individuos = new int [numIndividuos][numCromosomas];
         ValorCromosoma= new String[numIndividuos];
        ValorDecimal= new double[numIndividuos];
       ValorFuncion= new double[numIndividuos];
         AptitudRelativa= new double[numIndividuos];
         AptitudAcumulada= new double[numIndividuos];
        Rangos= new String[numIndividuos];
        
        Generar();  
       
        grafica2();
lblCromosoma.setText(Generar_PuntoCruce());

    }//GEN-LAST:event_BtngenerarActionPerformed

    private void cmbGradoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGradoItemStateChanged
       if(cmbGrado.getSelectedItem().toString()=="1"){
           txtA.setEnabled(false);
           txtB.setEnabled(false);
       } else if(cmbGrado.getSelectedItem().toString()=="2"){
           txtA.setEnabled(false); 
           txtB.setEnabled(true);
       }
       else if(cmbGrado.getSelectedItem().toString()=="3"){
           txtA.setEnabled(true);
           txtB.setEnabled(true);
       }
    }//GEN-LAST:event_cmbGradoItemStateChanged

    private void cmbNumCromomasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbNumCromomasItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbNumCromomasItemStateChanged

      private void llenar(){
         String numeroBinario="";
    for(int i=0; i<ValorCromosoma.length; i++){
     
      //generarIndividuos();
      
      for(int j=0;j<numCromosomas;j++){
      numeroBinario+=generarIndividuos();
      
      }
      
     ValorCromosoma[i]=numeroBinario;
     
      //System.out.print(numeroBinario);
      numeroBinario="";
    }
   
       for(int i=0; i<ValorCromosoma.length; i++){
      for(int j=0;j<numCromosomas;j++){
      numeroBinario+=generarIndividuos();
      } 
      
     ValorCromosoma[i]=numeroBinario;
     ValorDecimal[i]=ConvertirADecimal(ValorCromosoma[i]);
        a=Double.valueOf(txtA.getText().toString());
        b=Double.valueOf(txtB.getText().toString());
        c=Double.valueOf(txtC.getText().toString());
        d=Double.valueOf(txtD.getText().toString());
        int gradoFuncion=Integer.valueOf(cmbGrado.getSelectedItem().toString());
     ValorFuncion[i]= funcion(a,b,c,d, ValorDecimal[i],gradoFuncion );
     suma+=ValorFuncion[i];
      //System.out.print(numeroBinario);
      numeroBinario="";
    }
       double acumulador=0;
       
     for(int i=0;i<AptitudRelativa.length;i++){
     AptitudRelativa[i]=(ValorFuncion[i]/suma);
     AptitudAcumulada[i]=AptitudRelativa[i]*100;
         try {
                Rangos[i]= "("+decimal.format(acumulador)+" - "+decimal.format(AptitudAcumulada[i]+acumulador)+")";
                acumulador+=AptitudAcumulada[i];
     
     
         } catch (Exception e) {
         }
     
     }  
       
    }
      public  void Generar(){
       suma=0;
          llenar();
       
//        for(int i=0; i<ValorCromosoma.length; i++){
//            
//     System.out.println(ValorCromosoma[i]+" "+ValorDecimal[i]+" "+ValorFuncion[i]+" "+
//             decimal.format(AptitudRelativa[i])+" "+decimal.format(AptitudAcumulada[i])+" "+(Rangos[i]));
//     
//      //generarIndividuos();
//        }
        llenarTabla();
      }
    public  void llenarTabla( ){
         numIndividuos=Integer.valueOf(cmbNumCromomas.getSelectedItem().toString());
        Object data [][] = new Object [numIndividuos][7];
        String columName [] = {"Nª","CROMOSOMA","X","F(X)","APTITUD RELATIVA","ACTITUD ACUMULADA","RANGO"};
        for (int i = 0; i <numIndividuos ; i++) {
            for (int j = 0; j < Integer.valueOf(cmbNumCromomas.getSelectedItem().toString()); j++) {
               data[j][0] =  String.valueOf(j+1);
                data[j][1] = String.valueOf(ValorCromosoma[j]); 
                data[j][2] = String.valueOf(ValorDecimal[j]); 
                data[j][3] = String.valueOf(ValorFuncion[j]);
                data[j][4] = String.valueOf(decimal.format(AptitudRelativa[j]));
                data[j][5] = String.valueOf(decimal.format(AptitudAcumulada[j]));
                data[j][6] = Rangos[j];
                
            }
        }
        DefaultTableModel modelo = new DefaultTableModel(data, columName);
      tablaContenido.setModel(modelo);
     
        
    }
    
//    private void GenerarPuntosCruce(){
//    int n=6;  //numeros aleatorios
//       int k=n;  //auxiliar;
//        int[] numeros=new int[n];
//        int[] resultado=new int[n];
//        Random rnd=new Random();
//        int res;
//        
//        
//        
//        for(int i=0;i<n;i++){
//            numeros[i]=i+1;
//        }
//        
//        for(int i=0;i<n;i++){
//            res=rnd.nextInt(k);            
//            resultado[i]=numeros[res];
//            numeros[res]=numeros[k-1];
//            k--;
//            
//        }
//         //se imprime el resultado;
//        System.out.println("El resultado de la matriz es:");
//        for(int i=0;i<n;i++){
//        System.out.println(resultado[i]);
//        }
//    }
         
    
//    private double Truncar(double numero){
//        
////    NumberFormat number= NumberFormat.getInstance();
////    number.setMaximumFractionDigits(2);
////    number.setRoundingMode(RoundingMode.DOWN);
////    return number.format(numero);
//    
//    }
      /**
	 * Método para generar el conjunto inicial de individuos
	 */
	public static String generarIndividuos(){
        String valor="";
//		for (int i=0; i<numIndividuos; i++){
//			for (int j=0; j<numCromosomas; j++){
				double aleatorio = Math.random();
				if (aleatorio < 0.5)
					//individuos[i][j] = 0;
                                    valor="0";
				else
					//individuos[i][j] = 1;
                                    valor="1";
			//}
		//}
                                return valor;
	}
        
    private static double ConvertirADecimal(String numeroBinario){
    Stack vectorBase2= new Stack();
    
    double numero=0;
    for(int i=0;i<numeroBinario.length();i++){
        vectorBase2.add(Math.pow(2,i));
    }
    
    for(int i=0,j=vectorBase2.size()-1;i<numeroBinario.length();i++,j--){
        if(numeroBinario.charAt(i)=='1'){
            numero+=(double)vectorBase2.get(j);
        }
        
    
    }
    //System.out.println("Numero Decimal de "+numeroBinario);
    //System.out.println(numero);
    return numero;
    
//    for(int i=vectorBase2.size()-1;i>=0;i--){
//       
//    System.out.print(vectorBase2.get(i)+"  ");
//    }
    
    }
    private static void ConvertirABinario(String numeroDecimal){
    Stack pila= new Stack(); 
    int _numeroDecimal= Integer.valueOf(numeroDecimal);
    int Dividendo=_numeroDecimal;
    int divisor=2;
    int cociente=0;
    int residuo;
    
    while(Dividendo>=2){
    cociente = Dividendo/divisor;
    residuo= Dividendo%divisor;
    pila.add(residuo);
    
    Dividendo=cociente;
    }
    pila.add(cociente);
    
    System.out.println("Numero Binario de "+numeroDecimal+" :");
    for(int i=pila.size()-1;i>=0;i--){
        System.out.print(pila.get(i));
    }
    System.out.println();
    }

private static String convertirABinario(int a){
                               int i=0;
                               int bin[]=new int[8];
                               while(a>=1){
                                               if((a%2)==0) bin[i]=0;
                                               else bin[i]=1;
                                               a=a/2;
                                               i++;
                               }
                               int k=bin.length-1;
                               String cad="";
                               while(k>=0){
                                               cad+=bin[k];
                                               k--;
                               }
                               int lon=cad.length();
                               String cad2="";
                               for(int l=1;l<=7-lon;l++){
                                               cad2+="0";
                               }
                               cad2+=cad;
                               return cad2;
                }


private static String Generar_PuntoCruce(){
    Random rnd= new Random();
   String b="";
    int randomico1 = (int)(rnd.nextDouble()*6+0);
int randomico2 = (int)(rnd.nextDouble()*6+0);
    while(randomico1==randomico2){
randomico1 = (int)(rnd.nextDouble()*6+0);
randomico2 = (int)(rnd.nextDouble()*6+0);
//System.out.println("aleatorio "+randomico);
    }
b=""+randomico1+"  "+randomico2;
return b;
}

/**
	 * Metodo que devuelve el valor de la funcion 
         * funciones hasta de grado 3
         * ax^3 + bx^2 + cx + d
	 */
public static double funcion (double coeficienteX3,double coeficienteX2,double coeficienteX1,double terminoIndependiente,double ValorX,int gradoFuncion){
	double valorFuncion=0;
            switch (gradoFuncion)	{
            case 2:
                valorFuncion= (Math.pow(ValorX, 2))*coeficienteX2+(coeficienteX1*ValorX)+terminoIndependiente;
                    
                break;
            case 3:
                valorFuncion= (Math.pow(ValorX, 3))*coeficienteX3+(Math.pow(ValorX, 2))*coeficienteX2+(coeficienteX1*ValorX)+terminoIndependiente;
                break;
        }
            return valorFuncion;
	}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btngenerar;
    private javax.swing.JComboBox cmbGrado;
    private javax.swing.JComboBox cmbNumCromomas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2Graf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCromosoma;
    public static javax.swing.JTable tablaContenido;
    private javax.swing.JTextField txtA;
    private javax.swing.JTextField txtB;
    private javax.swing.JTextField txtC;
    private javax.swing.JTextField txtD;
    // End of variables declaration//GEN-END:variables
}
